---
title: Excpectations/Assertions
baseUri: http://httpbin.org/
headers:
    Accept: application/json
    X-Extra: 1234.0


resources:

    - title: Expect for specific status
      get: /status/500
      expect:
          - status: 500

    - title: Expect for status range
      get: /status/404
      assert:
          - status: 4xx

    - title: Expect for wrong status pattern (should fail)
      get: /status/500
      expect:
          - status: 4xx

    - title: Expect for wrong status list (should fail)
      get: /status/401
      expect:
          - status: [400, 403]

    - title: Expect headers
      get: /response-headers?X-Custom-Header=value&X-Sample=other
      headers:
        X-More-One: 567.9
      expect:
          # True if header exists
          - header: X-Custom-Header
          # True if has expected value
          - header: X-Custom-Header
            is: value
          # True if header not equal to value
          - header: X-Custom-Header
            is_not: other
          # True if header's value contain substring
          - header: X-Sample
            contains: the


    - title: Missing header (should fail)
      get: /response-headers?X-Custom=test
      expect:
          - header: X-Unexist

    - title: Header not match (should fail)
      get: /response-headers?X-Custom=test
      expect:
          - header: X-Custom
            is: testy

    - title: Header not contains substr (should fail)
      get: /response-headers?X-Custom=test
      expect:
          - header: X-Custom
            contains: foo

    - title: Test body value as text
      post: /post
      headers:
          Content-Type: text/plain
      data: "sample data"
      expect:
          # treat response body as text
          # check if body not empty
          - body: text
          # same tests as for headers
          - body: text
            contains: "data"

    - title: Unexpected response (should fail)
      post: /post
      headers:
          Content-Type: text/plain
      data: "one text"
      expect:
          - body: text
            contains: "one text"
          - body: text
            contains: "two text"

    - title: Test body value as json
      post: /post
      # content-type header will be set automatically if not provided
      json: {"key": "one", "date":  "2017-09-30T05:00:00", "nested": {"key": [1, 2, 3], "other": "two"}}
      expect:
          # treat body as a json, check if not empty or false
          - body: json
          # check if contains key (httpbin return request info as json)
          - body: json
            contains: "json"

    - title: Test body properties
      get: /get?var=12&tst=test_text
      expect:
        # check for existance, passed
         - body: json
           property: json.url

         - body: json
           property: json.args.var
           is: 12

         - body: json
           property: json.args.var
           is_not: 13

         - body: json
           property: json.args.tst
           contains: test

    - title: Test for empty values
      post: /post
      # content-type header will be set automatically if not provided
      json: {"key": "", "zero": 0, "list": [], "obj": {}, "bool": false}
      expect:
          - body: json
            property: json.json.key
            is: ""

          - body: json
            property: json.json.zero
            is: 0

          - body: json
            property: json.json.list
            is: []

          - body: json
            property: json.json.obj
            is: {}

          - body: json
            property: json.json.bool
            is: false

    - title: Property not found (should fail)
      get: /get
      expect:
         - body: json
           property: json.unexists

    - title: JSON lists in object assertions
      post: /post
      json: {"key": "val", "list": ["one", "two", "three"]}
      expect:
        - body: json
          property: json.json.key
          is: "val"
        # list numbering starts form 0, as usual
        - body: json
          property: json.json.list.0
          is: "one"
        - body: json
          property: json.json.list.2
          is_not: "two"
        # lists can be checked for length
        - body: json
          property: json.json.list
          length: 3
        # and not only lists
        - body: json
          property: json.json
          length: 2

    - title: Failng list check (should fail)
      post: /post
      json: ["a", "b", "c"]
      expect:
        - body: json
          property: json.json.1
          is: "x"

    - title: Failng list length check (should fail)
      post: /post
      json: ["x", "y", "z"]
      expect:
        - body: json
          property: json.json
          length: 2
